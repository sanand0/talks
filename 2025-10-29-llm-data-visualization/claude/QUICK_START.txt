╔══════════════════════════════════════════════════════════════════════════╗
║                   SOM CLASSROOM DEMO - QUICK START                       ║
╚══════════════════════════════════════════════════════════════════════════╝

📦 WHAT YOU HAVE
├── customer_shopping_data.csv      [Dataset: 130 customers, 5 features]
├── generate_som_dataset.py         [Recreate the dataset]
├── som_visualization.py            [Complete SOM implementation]
├── som_visualization.png           [Pre-generated results]
└── README.md                       [Full documentation]

⚡ INSTANT START (3 commands)
┌──────────────────────────────────────────────────────────────────────────┐
│ 1. pip install numpy pandas matplotlib scikit-learn minisom             │
│ 2. python som_visualization.py                                          │
│ 3. Open som_visualization.png                                           │
└──────────────────────────────────────────────────────────────────────────┘

🎯 THE DATASET
Customer Shopping Behavior (Real-world Retail Scenario)

Features (5):
  • monthly_spending        → How much they spend ($)
  • visit_frequency         → How often they visit
  • avg_purchase_value      → Average transaction size ($)
  • online_preference       → Online vs. in-store (0-1)
  • discount_sensitivity    → Response to discounts (0-1)

Hidden Segments (5):
  • Budget Shoppers (30)    → Low spend, high discount sensitivity
  • Premium Buyers (25)     → High spend, low discount needs
  • Frequent Visitors (28)  → Many visits, moderate spend
  • Online Enthusiasts (27) → Heavy online preference
  • Occasional Splurgers (20) → Rare but big purchases

📊 THE VISUALIZATIONS (8 plots)

1. U-Matrix              → Shows cluster BOUNDARIES (dark = edge)
2. Hit Map              → Shows customer DENSITY (hot = popular)
3. Segment Map          → Where TRUE segments landed (validation)
4-8. Component Planes   → How each FEATURE varies across map

🎓 TEACHING FLOW (45-60 min)

┌─ Part 1: Intro (10 min) ────────────────────────────────────────────────┐
│ • What is unsupervised learning?                                        │
│ • Why visualize high-dimensional data?                                  │
│ • SOMs = Smart 2D projection that preserves similarity                  │
└──────────────────────────────────────────────────────────────────────────┘

┌─ Part 2: The Data (5 min) ──────────────────────────────────────────────┐
│ • Show CSV file                                                          │
│ • Explain 5 features                                                     │
│ • "How would YOU group these customers?"                                │
└──────────────────────────────────────────────────────────────────────────┘

┌─ Part 3: Live Demo (20 min) ────────────────────────────────────────────┐
│ • Run som_visualization.py (students watch output)                      │
│ • Examine U-Matrix: "Where are boundaries?"                             │
│ • Check Hit Map: "Where are most customers?"                            │
│ • Reveal segments: "Did SOM find them?"                                 │
│ • Study component planes: "What patterns emerge?"                       │
└──────────────────────────────────────────────────────────────────────────┘

┌─ Part 4: Hands-On (15 min) ─────────────────────────────────────────────┐
│ Students modify parameters in som_visualization.py:                     │
│                                                                          │
│   som = train_som(X_scaled,                                             │
│                   som_shape=(10, 10),      # Try: (5,5), (20,20)       │
│                   sigma=1.5,               # Try: 0.5, 3.0             │
│                   learning_rate=0.5,       # Try: 0.1, 1.0             │
│                   num_iterations=1000)     # Try: 500, 5000            │
│                                                                          │
│ Questions: What changes? Better or worse? Why?                          │
└──────────────────────────────────────────────────────────────────────────┘

┌─ Part 5: Wrap-Up (5 min) ───────────────────────────────────────────────┐
│ Real-world uses:                                                         │
│   • Customer segmentation (marketing)                                    │
│   • Document clustering (search engines)                                 │
│   • Image compression (graphics)                                         │
│   • Sensor analysis (robotics)                                           │
└──────────────────────────────────────────────────────────────────────────┘

🔧 QUICK PARAMETER GUIDE

Grid Size (som_shape)
  (5, 5)   → Coarse clustering, fewer neurons
  (10, 10) → RECOMMENDED (balance)
  (20, 20) → Fine detail, more training needed

Neighborhood (sigma)
  0.5-1.0  → Tight, distinct clusters
  1.5-2.0  → RECOMMENDED (smooth)
  3.0+     → Very smooth, may over-generalize

Learning Rate
  0.1-0.3  → Slow, stable convergence
  0.5      → RECOMMENDED (balanced)
  0.7-1.0  → Fast but may miss fine details

Iterations
  500      → Quick demo (may underfit)
  1000     → RECOMMENDED (good results)
  2000+    → Best quality (slower)

💡 KEY CONCEPTS TO EMPHASIZE

✓ Topology Preservation    → Similar inputs stay close on map
✓ Competitive Learning     → Neurons "compete" for inputs
✓ Unsupervised Discovery   → No labels needed!
✓ Dimensionality Reduction → 5D → 2D (with structure preserved)
✓ Neighborhood Learning    → Winners affect nearby neurons

🎯 LEARNING OBJECTIVES

Students should grasp:
  □ What SOMs do (map high-D → 2D while preserving topology)
  □ How to interpret U-Matrix and component planes
  □ Why SOMs are useful (visualization + clustering)
  □ When to use SOMs (exploratory analysis, visualization)
  □ How parameters affect results (experimentation)

📈 SUCCESS MARKERS

Great session if students can:
  ✓ Explain SOM in their own words
  ✓ Read the visualizations correctly
  ✓ Modify parameters and predict effects
  ✓ Suggest a new application domain
  ✓ Compare SOMs to k-means clustering

🐛 COMMON ISSUES

"Module not found"
  → pip install [missing package]

"Clusters look random"
  → Increase iterations (try 2000-5000)
  → Check if features are standardized (they are!)

"Visualization too cluttered"
  → Reduce grid size (try 5x5 or 8x8)
  → Increase marker transparency in code

🎉 FUN FACTS TO SHARE

• Invented by Teuvo Kohonen in 1982
• Used in brain research to model sensory maps
• Powers music recommendation systems
• NASA uses SOMs to analyze satellite imagery
• Can visualize 100+ dimensional data!

══════════════════════════════════════════════════════════════════════════

🚀 Ready to go! Start with: python som_visualization.py

For full details, see README.md
For customization, edit the .py files
For reproducibility, run generate_som_dataset.py first

Happy teaching! 🎓
